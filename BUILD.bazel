package(default_visibility = ["//visibility:public"])

load("@rules_proto//proto:defs.bzl", "proto_library")
load("@io_grpc_grpc_java//:java_grpc_library.bzl", "java_grpc_library")
load("@io_bazel_rules_docker//lang:image.bzl", container_image = "app_layer")



# grpc message

proto_library(
    name = "addressbook_proto",
    srcs = [
        "src/main/proto/addressbook.proto",
    ]
)

proto_library(
    name = "greeter_proto",
    srcs = [
        "src/main/proto/greeter.proto",
    ],
    deps = [
        ":addressbook_proto",
    ]
)

java_proto_library(
    name = "addressbook_proto_java",
    deps = [
        ":addressbook_proto",
    ]
)

java_proto_library(
    name = "greeter_proto_java",
    deps = [
        ":greeter_proto",
    ],
)

java_grpc_library(
    name = "greeter_java_grpc",
    srcs = [
        ":greeter_proto",
    ],
    deps = [
        ":greeter_proto_java",
    ],
)


# library

filegroup(
    name = "srcs",
    srcs = glob(["src/main/java/**/grnd/constants/*.java"]) +
        glob(["src/main/java/**/grnd/controller/*.java"]) +
        glob(["src/main/java/**/grnd/entity/*.java"]) +
        glob(["src/main/java/**/grnd/entity/engine/*.java"]) +
        glob(["src/main/java/**/grnd/exception/*.java"]) +
        glob(["src/main/java/**/grnd/service/*.java"]) +
        glob(["src/main/java/**/grnd/util/*.java"]) +
        glob(["src/main/java/**/grnd/*.java"])
)

java_library(
    name = "augmentation-backend-library",
    srcs = [
        ":srcs",
        ],
    resources = glob(["src/main/resources/**/*"]),
    deps = [
        ":addressbook_proto_java",
        ":greeter_proto_java",
        ":greeter_java_grpc",
        "@io_grpc_grpc_java//api",
        "@io_grpc_grpc_java//stub",
        
        "@maven//:org_springframework_boot_spring_boot_starter_web",
        "@maven//:com_google_code_gson_gson",
        "@maven//:com_squareup_okhttp3_okhttp",
        "@maven//:io_kubernetes_client_java_extended",

        "@maven//:io_kubernetes_client_java",
        "@maven//:io_kubernetes_client_java_api",
        "@maven//:io_kubernetes_client_java_api_fluent",
        "@maven//:org_springframework_boot_spring_boot",
        "@maven//:org_springframework_boot_spring_boot_autoconfigure",
        "@maven//:org_springframework_spring_beans",
        "@maven//:org_springframework_spring_context",
        "@maven//:org_springframework_spring_core",
        "@maven//:org_springframework_spring_web",
        "@maven//:org_apache_tomcat_annotations_api",
        "@maven//:javax_servlet_servlet_api",
        "@maven//:org_yaml_snakeyaml",
        "@maven//:org_slf4j_slf4j_api",
    ],
)


# host

java_binary(
    name = "augmentation-backend-app",
    srcs = glob(["src/main/java/**/grnd/GovernmentRnDDemoApplication.java"]),
    resources = glob(["src/main/resources/**/*"]),
    deps = [
        ":augmentation-backend-library",
        ":addressbook_proto_java",
        ":greeter_proto_java",
        ":greeter_java_grpc",
        "@io_grpc_grpc_java//api",
        "@io_grpc_grpc_java//stub",

        "@maven//:org_springframework_boot_spring_boot_starter_web",
        "@maven//:com_google_code_gson_gson",
        "@maven//:com_squareup_okhttp3_okhttp",
        "@maven//:io_kubernetes_client_java_extended",

        "@maven//:io_kubernetes_client_java",
        "@maven//:io_kubernetes_client_java_api",
        "@maven//:io_kubernetes_client_java_api_fluent",
        "@maven//:org_springframework_boot_spring_boot",
        "@maven//:org_springframework_boot_spring_boot_autoconfigure",
        "@maven//:org_springframework_spring_beans",
        "@maven//:org_springframework_spring_context",
        "@maven//:org_springframework_spring_core",
        "@maven//:org_springframework_spring_web",
        "@maven//:org_apache_tomcat_annotations_api",
        "@maven//:javax_servlet_servlet_api",
        "@maven//:org_yaml_snakeyaml",
        "@maven//:org_slf4j_slf4j_api",
    ],
    main_class = "com.nexr.de.grnd.GovernmentRnDDemoApplication",
)


# docker image

container_image(
    name="augmentation-backend-image",
    base="@augmentation-backend-base//image",
    binary=":augmentation-backend-app",
    docker_run_flags="-it --rm --network=host --runtime=nvidia"
    )